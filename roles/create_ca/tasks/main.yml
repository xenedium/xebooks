---
# This playbook is not idempotent, it will always create a new certificate

- name: Remove old certificates
  file:
    path: "{{certs_dir}}"
    state: absent

- name: Create the Certs directory
  file:
    path: "{{certs_dir}}"
    state: directory
    mode: 0755

- name: Create private key for CA
  community.crypto.openssl_privatekey:
    path: "{{certs_dir}}/ca-certificate.key"

- name: Create certificate signing request (CSR) for CA certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{certs_dir}}/ca-certificate.key"
    common_name: Ansible CA
    use_common_name_for_san: false # since we do not specify SANs, don't use CN as a SAN
    basic_constraints:
      - "CA:TRUE"
    basic_constraints_critical: true
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: ca_csr

- name: Create self-signed CA certificate from CSR
  community.crypto.x509_certificate:
    path: "{{certs_dir}}/ca-certificate.crt"
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: "{{certs_dir}}/ca-certificate.key"
    provider: selfsigned

- name: Fetch the CA certificate
  fetch:
    src: "{{certs_dir}}/ca-certificate.crt"
    dest: "roles/generate_ssl/files/ca-certificate.crt"
    flat: yes

- name: Fetch the CA private key
  fetch:
    src: "{{certs_dir}}/ca-certificate.key"
    dest: "roles/generate_ssl/files/ca-certificate.key"
    flat: yes
